(function (d3) {
  'use strict';

  const svg = d3.select('svg');
  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const margin = { top: 20, right: 20, bottom: 30, left: 130 };
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  const render = data => {
    const xValue = d => d.population;
    const yValue = d => d.country;

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);
    
    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .padding(0.1);
    
    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    const xAxisTickFormat = number => 
    	d3.format('.2s')(number)
    	 .replace('G', 'B');
    
    const xAxis = d3.axisBottom(xScale)
      .tickFormat(xAxisTickFormat)
    	.tickSize(-innerHeight);
    
    g.append('g')
      .call(d3.axisLeft(yScale))
    	.selectAll('.domain, .tick line')
    		.remove();
    g.append('g')
      .call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`)
      .select('.domain')
    		.remove();
    
    g.selectAll('rect').data(data)
      .enter().append('rect')
        .attr('y', d => yScale(yValue(d)))
        .attr('width', d => xScale(xValue(d)))
        .attr('height', yScale.bandwidth());
  };

  d3.csv('data.csv').then(data => {
    data.forEach(d => {
      d.population = +d.population * 1000;
    });
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNlbGVjdCxcbiAgY3N2LFxuICBzY2FsZUxpbmVhcixcbiAgbWF4LFxuICBzY2FsZUJhbmQsXG4gIGF4aXNMZWZ0LFxuICBheGlzQm90dG9tLFxuICBmb3JtYXRcbn0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG5jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpO1xuY29uc3QgbWFyZ2luID0geyB0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzAsIGxlZnQ6IDEzMCB9O1xuY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG5jb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb247XG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5jb3VudHJ5O1xuXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFswLCBtYXgoZGF0YSwgeFZhbHVlKV0pXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSk7XG4gIFxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgIC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgICAucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgICAucGFkZGluZygwLjEpO1xuICBcbiAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT4gXG4gIFx0Zm9ybWF0KCcuMnMnKShudW1iZXIpXG4gIFx0IC5yZXBsYWNlKCdHJywgJ0InKTtcbiAgXG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpXG4gICAgLnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuICBcdC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpO1xuICBcbiAgZy5hcHBlbmQoJ2cnKVxuICAgIC5jYWxsKGF4aXNMZWZ0KHlTY2FsZSkpXG4gIFx0LnNlbGVjdEFsbCgnLmRvbWFpbiwgLnRpY2sgbGluZScpXG4gIFx0XHQucmVtb3ZlKClcbiAgZy5hcHBlbmQoJ2cnKVxuICAgIC5jYWxsKHhBeGlzKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYClcbiAgICAuc2VsZWN0KCcuZG9tYWluJylcbiAgXHRcdC5yZW1vdmUoKTtcbiAgXG4gIGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICAgIC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gICAgICAuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHlTY2FsZS5iYW5kd2lkdGgoKSk7XG59O1xuXG5jc3YoJ2RhdGEuY3N2JykudGhlbihkYXRhID0+IHtcbiAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgIGQucG9wdWxhdGlvbiA9ICtkLnBvcHVsYXRpb24gKiAxMDAwO1xuICB9KTtcbiAgcmVuZGVyKGRhdGEpO1xufSk7Il0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiZm9ybWF0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFXQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUss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